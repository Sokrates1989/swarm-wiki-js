networks:
  wiki_js_backend:
    driver: overlay
  traefik:
    external: true



services:
  db:
    image: postgres:16
    volumes:
      - ${DATA_ROOT}/db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${WIKIJS_DB_NAME}
      POSTGRES_USER: ${WIKIJS_DB_USER}
      POSTGRES_PASSWORD: ${WIKIJS_DB_PASSWORD}
    networks:
      - wiki_js_backend

  wiki:
    image: ghcr.io/requarks/wiki:2
    environment:
      DB_TYPE: ${WIKIJS_DB_TYPE}
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${WIKIJS_DB_NAME}
      DB_USER: ${WIKIJS_DB_USER}
      DB_PASS: ${WIKIJS_DB_PASSWORD}
    networks:
      - wiki_js_backend
      - traefik
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      - traefik.enable=true
      - traefik.constraint-label=traefik-public
      - traefik.docker.network=traefik
      - traefik.http.routers.${STACK_NAME}_wiki.service=${STACK_NAME}_wiki
      - traefik.http.services.${STACK_NAME}_wiki.loadbalancer.server.port=3000
      - traefik.http.routers.${STACK_NAME}_wiki.rule=Host(`${WIKIJS_HOSTNAME}`, `www.${WIKIJS_HOSTNAME}`)
      - traefik.http.routers.${STACK_NAME}_wiki.entrypoints=https,http,web
      - traefik.http.routers.${STACK_NAME}_wiki.tls=true
      - traefik.http.routers.${STACK_NAME}_wiki.tls.certresolver=le
      # Pass the original Host header to the container.
      - "traefik.http.services.${STACK_NAME}_wiki.loadbalancer.passhostheader=true"
      # Apply a compression middleware.
      - "traefik.http.routers.${STACK_NAME}_wiki.middlewares=compresstraefik"
      # Define settings for the compression middleware.
      - "traefik.http.middlewares.compresstraefik.compress=true"